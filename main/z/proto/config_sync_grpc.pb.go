// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: config_sync.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigSync_GetConfig_FullMethodName         = "/ConfigSync/getConfig"
	ConfigSync_SendHeart_FullMethodName         = "/ConfigSync/sendHeart"
	ConfigSync_UploadExecuteInfo_FullMethodName = "/ConfigSync/uploadExecuteInfo"
)

// ConfigSyncClient is the client API for ConfigSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigSyncClient interface {
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigRes, error)
	SendHeart(ctx context.Context, in *HeartReq, opts ...grpc.CallOption) (*HeartRes, error)
	UploadExecuteInfo(ctx context.Context, in *UploadExecMsgReq, opts ...grpc.CallOption) (*UploadExecMsgRes, error)
}

type configSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigSyncClient(cc grpc.ClientConnInterface) ConfigSyncClient {
	return &configSyncClient{cc}
}

func (c *configSyncClient) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigRes, error) {
	out := new(GetConfigRes)
	err := c.cc.Invoke(ctx, ConfigSync_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSyncClient) SendHeart(ctx context.Context, in *HeartReq, opts ...grpc.CallOption) (*HeartRes, error) {
	out := new(HeartRes)
	err := c.cc.Invoke(ctx, ConfigSync_SendHeart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSyncClient) UploadExecuteInfo(ctx context.Context, in *UploadExecMsgReq, opts ...grpc.CallOption) (*UploadExecMsgRes, error) {
	out := new(UploadExecMsgRes)
	err := c.cc.Invoke(ctx, ConfigSync_UploadExecuteInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigSyncServer is the server API for ConfigSync service.
// All implementations must embed UnimplementedConfigSyncServer
// for forward compatibility
type ConfigSyncServer interface {
	GetConfig(context.Context, *GetConfigReq) (*GetConfigRes, error)
	SendHeart(context.Context, *HeartReq) (*HeartRes, error)
	UploadExecuteInfo(context.Context, *UploadExecMsgReq) (*UploadExecMsgRes, error)
	mustEmbedUnimplementedConfigSyncServer()
}

// UnimplementedConfigSyncServer must be embedded to have forward compatible implementations.
type UnimplementedConfigSyncServer struct {
}

func (UnimplementedConfigSyncServer) GetConfig(context.Context, *GetConfigReq) (*GetConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedConfigSyncServer) SendHeart(context.Context, *HeartReq) (*HeartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeart not implemented")
}
func (UnimplementedConfigSyncServer) UploadExecuteInfo(context.Context, *UploadExecMsgReq) (*UploadExecMsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadExecuteInfo not implemented")
}
func (UnimplementedConfigSyncServer) mustEmbedUnimplementedConfigSyncServer() {}

// UnsafeConfigSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigSyncServer will
// result in compilation errors.
type UnsafeConfigSyncServer interface {
	mustEmbedUnimplementedConfigSyncServer()
}

func RegisterConfigSyncServer(s grpc.ServiceRegistrar, srv ConfigSyncServer) {
	s.RegisterService(&ConfigSync_ServiceDesc, srv)
}

func _ConfigSync_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSyncServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigSync_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSyncServer).GetConfig(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSync_SendHeart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSyncServer).SendHeart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigSync_SendHeart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSyncServer).SendHeart(ctx, req.(*HeartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSync_UploadExecuteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadExecMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSyncServer).UploadExecuteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigSync_UploadExecuteInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSyncServer).UploadExecuteInfo(ctx, req.(*UploadExecMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigSync_ServiceDesc is the grpc.ServiceDesc for ConfigSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ConfigSync",
	HandlerType: (*ConfigSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getConfig",
			Handler:    _ConfigSync_GetConfig_Handler,
		},
		{
			MethodName: "sendHeart",
			Handler:    _ConfigSync_SendHeart_Handler,
		},
		{
			MethodName: "uploadExecuteInfo",
			Handler:    _ConfigSync_UploadExecuteInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_sync.proto",
}
